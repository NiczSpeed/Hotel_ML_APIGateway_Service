version: '3.8'
networks:
  hotel-ml-net:
    name: hotel-ml-net
    driver: bridge

services:
  HotelMLAPIDB:
    container_name: HotelMLAPIDB
    image: 'postgres:16.2'
    environment:
      - 'POSTGRES_DB=HotelMLAPIDB'
      - 'POSTGRES_PASSWORD=secret'
      - 'POSTGRES_USER=root'
    ports:
      - '5433:5432'
    networks:
      - hotel-ml-net

  HotelMLAuthDB:
    container_name: HotelMLAuthDB
    image: 'postgres:16.2'
    environment:
      - 'POSTGRES_DB=HotelMLAuthDB'
      - 'POSTGRES_PASSWORD=secret'
      - 'POSTGRES_USER=root'
    ports:
      - '5432:5432'
    networks:
      - hotel-ml-net

  HotelMLReservationDB:
    container_name: HotelMLReservationDB
    image: 'postgres:16.2'
    environment:
      - 'POSTGRES_DB=HotelMLReservationDB'
      - 'POSTGRES_PASSWORD=secret'
      - 'POSTGRES_USER=root'
    ports:
      - '5434:5432'
    networks:
      - hotel-ml-net

  HotelMLRoomsAndHotelsDB:
    container_name: HotelMLRoomsAndHotelsDB
    image: 'postgres:16.2'
    environment:
      - 'POSTGRES_DB=HotelMLRoomsAndHotelsDB'
      - 'POSTGRES_PASSWORD=secret'
      - 'POSTGRES_USER=root'
    ports:
      - '5435:5432'
    networks:
      - hotel-ml-net

  pgadmin:
    container_name: pgadmin
    image: dpage/pgadmin4
    restart: always
    networks:
      - hotel-ml-net
    environment:
      PGADMIN_DEFAULT_EMAIL: admin@admin.com
      PGADMIN_DEFAULT_PASSWORD: root
    ports:
      - "5050:80"

  hotel_ml_apigateway_service:
    container_name: hotel_ml_apigateway_service
    build:
      context: ./
      dockerfile: Dockerfile
    environment:
      - spring.kafka.bootstrap-servers=broker_1:7097, broker_2:7098, broker_3:7099
      - spring.datasource.url=jdbc:postgresql://HotelMLAPIDB:5432/HotelMLAPIDB
    networks:
      - hotel-ml-net
    ports:
      - "8081:8081"
    depends_on:
      - HotelMLAPIDB
      - broker_1
      - broker_2
      - broker_3

  hotel_ml_auth_service:
    container_name: hotel_ml_auth_service
    build:
      context: ../Hotel_ML_Auth_Service
      dockerfile: Dockerfile
    networks:
      - hotel-ml-net
    environment:
      - spring.kafka.bootstrap-servers=broker_1:7097, broker_2:7098, broker_3:7099
      - spring.datasource.url=jdbc:postgresql://HotelMLAuthDB:5432/HotelMLAuthDB
    ports:
      - "8082:8082"
    depends_on:
      - HotelMLAuthDB
      - broker_1
      - broker_2
      - broker_3

  hotel_ml_rooms_reservation_service:
    container_name: hotel_ml_rooms_reservation_service
    build:
      context: ../Hotel_ML_Reservation_Service
      dockerfile: Dockerfile
    networks:
      - hotel-ml-net
    environment:
      - spring.kafka.bootstrap-servers=broker_1:7097, broker_2:7098, broker_3:7099
      - spring.datasource.url=jdbc:postgresql://HotelMLReservationDB:5432/HotelMLReservationDB
    ports:
      - "8083:8083"
    depends_on:
      - HotelMLReservationDB
      - broker_1
      - broker_2
      - broker_3

  hotel_ml_rooms_and_hotels_service:
    container_name: hotel_ml_rooms_and_hotels_service
    build:
      context: ../Hotel_ML_Rooms_And_Hotels_Service
      dockerfile: Dockerfile
    networks:
      - hotel-ml-net
    environment:
      - spring.kafka.bootstrap-servers=broker_1:7097, broker_2:7098, broker_3:7099
      - spring.datasource.url=jdbc:postgresql://HotelMLRoomsAndHotelsDB:5432/HotelMLRoomsAndHotelsDB
    ports:
      - "8084:8084"
    depends_on:
      - HotelMLRoomsAndHotelsDB
      - broker_1
      - broker_2
      - broker_3

  zookeeper:
    image: confluentinc/cp-zookeeper:7.4.0
    container_name: zookeeper
    networks:
      - hotel-ml-net
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000

  broker_1:
    image: confluentinc/cp-kafka:7.4.0
    container_name: broker_1
    restart: always
    networks:
      - hotel-ml-net
    ports:
      - "8097:8097"
    depends_on:
      - zookeeper
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: 'zookeeper:2181'
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT_EXTERNAL:PLAINTEXT,PLAINTEXT_INTERNAL:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT_EXTERNAL://localhost:8097,PLAINTEXT_INTERNAL://broker_1:7097
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT_INTERNAL
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1

  broker_2:
    image: confluentinc/cp-kafka:7.4.0
    container_name: broker_2
    restart: always
    networks:
      - hotel-ml-net
    ports:
      - "8098:8098"
    depends_on:
      - zookeeper
    environment:
      KAFKA_BROKER_ID: 2
      KAFKA_ZOOKEEPER_CONNECT: 'zookeeper:2181'
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT_EXTERNAL:PLAINTEXT,PLAINTEXT_INTERNAL:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT_EXTERNAL://localhost:8098,PLAINTEXT_INTERNAL://broker_2:7098
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT_INTERNAL
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1

  broker_3:
    image: confluentinc/cp-kafka:7.4.0
    container_name: broker_3
    restart: always
    networks:
      - hotel-ml-net
    ports:
      - "8099:8099"
    depends_on:
      - zookeeper
    environment:
      KAFKA_BROKER_ID: 3
      KAFKA_ZOOKEEPER_CONNECT: 'zookeeper:2181'
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT_EXTERNAL:PLAINTEXT,PLAINTEXT_INTERNAL:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT_EXTERNAL://localhost:8099,PLAINTEXT_INTERNAL://broker_3:7099
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT_INTERNAL
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1

  kafdrop:
    image: obsidiandynamics/kafdrop
    container_name: kafdrop
    restart: always
    networks:
      - hotel-ml-net
    ports:
      - "9000:9000"
    environment:
      KAFKA_BROKERCONNECT: broker_1:7097, broker_2:7098, broker_3:7099
    depends_on:
      - broker_1
      - broker_2
      - broker_3